{"mappings":"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","sources":["<anon>","source/script.js"],"sourcesContent":["var renderer, scene, camera, BigSphere, blob, stars, controls, timeout_Debounce, noise = new SimplexNoise(), cameraSpeed = 0, blobScale = 3;\nfunction init() {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 0.01, 1000);\n    camera.position.set(0, 0, 250);\n    var directionalLight = new THREE.DirectionalLight(\"#fff\", 2);\n    directionalLight.position.set(0, 50, -30);\n    scene.add(directionalLight);\n    var ambientLight = new THREE.AmbientLight(\"#ffffff\", 1);\n    ambientLight.position.set(0, 20, 20);\n    scene.add(ambientLight);\n    renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n    });\n    var container = document.getElementById(\"canvas_container\");\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.appendChild(renderer.domElement);\n    //OrbitControl\n    controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n    controls.maxDistance = 400;\n    controls.minDistance = 100;\n    var loader = new THREE.TextureLoader();\n    var textureBigSphere = loader.load(\"../space.jpg\");\n    var textureblob = loader.load(\"../galaxy.jpg\");\n    var textureStar = loader.load(\"../starShape.jpg\");\n    var texture1 = loader.load(\"../twinkleStar.png\");\n    var texture2 = loader.load(\"../twinkleStar2.png\");\n    //blob    \n    var icosahedronGeometry = new THREE.IcosahedronGeometry(35, 10);\n    var blobtMaterial = new THREE.MeshPhongMaterial({\n        map: textureblob\n    });\n    blob = new THREE.Mesh(icosahedronGeometry, blobtMaterial);\n    scene.add(blob);\n    //sphere  background   \n    var geometryBigSphere = new THREE.SphereBufferGeometry(150, 40, 40);\n    var materialBigSphere = new THREE.MeshBasicMaterial({\n        //This killed me to figure out\n        side: THREE.BackSide,\n        map: textureBigSphere\n    });\n    BigSphere = new THREE.Mesh(geometryBigSphere, materialBigSphere);\n    scene.add(BigSphere);\n    //moving stars\n    var starsGeometry = new THREE.Geometry();\n    for(var i = 0; i < 40; i++){\n        var particleStar = randomPointSphere(200);\n        particleStar.velocity = THREE.MathUtils.randInt(50, 300);\n        particleStar.startX = particleStar.x;\n        particleStar.startY = particleStar.y;\n        particleStar.startZ = particleStar.z;\n        starsGeometry.vertices.push(particleStar);\n    }\n    var starsMaterial = new THREE.PointsMaterial({\n        size: 4,\n        color: \"#ffffff\",\n        transparent: true,\n        opacity: 0.75,\n        map: textureStar,\n        blending: THREE.AdditiveBlending\n    });\n    stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n    //fixed stars\n    function createStars(texture, size, total) {\n        var pointGeometry = new THREE.Geometry();\n        var pointMaterial = new THREE.PointsMaterial({\n            size: size,\n            map: texture,\n            blending: THREE.AdditiveBlending\n        });\n        for(var i = 0; i < total; i++){\n            var radius = THREE.MathUtils.randInt(75, 150);\n            var particles = randomPointSphere(radius);\n            pointGeometry.vertices.push(particles);\n        }\n        return new THREE.Points(pointGeometry, pointMaterial);\n    }\n    scene.add(createStars(texture1, 15, 25));\n    scene.add(createStars(texture2, 5, 35));\n    scene.add(createStars(texture2, 2, 50));\n    function randomPointSphere(radius) {\n        var theta = 2 * Math.PI * Math.random();\n        var phi = Math.acos(2 * Math.random() - 1);\n        var dx = 0 + radius * Math.sin(phi) * Math.cos(theta);\n        var dy = 0 + radius * Math.sin(phi) * Math.sin(theta);\n        var dz = 0 + radius * Math.cos(phi);\n        return new THREE.Vector3(dx, dy, dz);\n    }\n}\nfunction animate() {\n    //moving stars\n    stars.geometry.vertices.forEach(function(v) {\n        //move all the stars to the center\n        v.x += (0 - v.x) / v.velocity;\n        v.y += (0 - v.y) / v.velocity;\n        v.z += (0 - v.z) / v.velocity;\n        v.velocity -= 0.2;\n        //set back to origin\n        if (v.x <= 5 && v.x >= -5 && v.z <= 5 && v.z >= -5) {\n            v.x = v.startX;\n            v.y = v.startY;\n            v.z = v.startZ;\n            v.velocity = THREE.MathUtils.randInt(50, 300);\n        }\n    });\n    //blob animation\n    blob.geometry.vertices.forEach(function(v) {\n        var time = Date.now();\n        v.normalize();\n        var distance = blob.geometry.parameters.radius + noise.noise3D(//channge to big numbers to make blob dance like crazy\n        v.x + time * 0.0006, v.y + time * 0.0004, v.z + time * 0.0009) * blobScale;\n        v.multiplyScalar(distance);\n    });\n    blob.geometry.verticesNeedUpdate = true;\n    blob.geometry.normalsNeedUpdate = true;\n    blob.geometry.computeVertexNormals();\n    blob.geometry.computeFaceNormals();\n    blob.rotation.y += 0.002;\n    //Sphere background rotation\n    BigSphere.rotation.x += 0.001;\n    BigSphere.rotation.y += 0.001;\n    BigSphere.rotation.z += 0.001;\n    controls.update();\n    stars.geometry.verticesNeedUpdate = true;\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n}\ninit();\nanimate();\n//Resize window\nwindow.addEventListener(\"resize\", onWindowResize, false);\nfunction onWindowResize() {\n    var canvasWidth = window.innerWidth;\n    var canvasHeight = window.innerHeight;\n    renderer.setSize(canvasWidth, canvasHeight);\n    camera.aspect = canvasWidth / canvasHeight;\n    camera.updateProjectionMatrix();\n}\n\n//# sourceMappingURL=index.a0c6c241.js.map\n","var renderer,\nscene,\ncamera,\nBigSphere,\nblob,\nstars,\ncontrols,\ntimeout_Debounce,\nnoise = new SimplexNoise(),\ncameraSpeed = 0,\nblobScale = 3;\n\n\n\nfunction init() {\n    scene = new THREE.Scene();\n\n    camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 0.01, 1000)\n    camera.position.set(0,0,250);\n\n    var directionalLight = new THREE.DirectionalLight(\"#fff\", 2);\n    directionalLight.position.set(0, 50, -30);\n    scene.add(directionalLight);\n\n    var ambientLight = new THREE.AmbientLight(\"#ffffff\", 1);\n    ambientLight.position.set(0, 20, 20);\n    scene.add(ambientLight);\n\n    renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n    });\n\n    var container = document.getElementById(\"canvas_container\");\n\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    container.appendChild(renderer.domElement);\n\n    //OrbitControl\n    controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n    controls.maxDistance = 400;\n    controls.minDistance = 100;\n\n    var loader = new THREE.TextureLoader();\n    var textureBigSphere = loader.load('../space.jpg');\n    var textureblob = loader.load('../galaxy.jpg');\n    var textureStar = loader.load('../starShape.jpg');\n    var texture1 = loader.load('../twinkleStar.png');  \n    var texture2 = loader.load(\"../twinkleStar2.png\");\n\n\n    //blob    \n    var icosahedronGeometry = new THREE.IcosahedronGeometry(35, 10);\n    var blobtMaterial = new THREE.MeshPhongMaterial({ map: textureblob });\n    blob = new THREE.Mesh(icosahedronGeometry, blobtMaterial);\n    scene.add(blob);\n\n\n    //sphere  background   \n    var geometryBigSphere = new THREE.SphereBufferGeometry(150, 40, 40);\n    var materialBigSphere = new THREE.MeshBasicMaterial({\n        //This killed me to figure out\n        side: THREE.BackSide,\n        map: textureBigSphere,\n    });\n    BigSphere = new THREE.Mesh(geometryBigSphere, materialBigSphere);\n    scene.add(BigSphere);\n\n\n    //moving stars\n    var starsGeometry = new THREE.Geometry();\n\n    for (var i = 0; i < 40; i++) {\n        var particleStar = randomPointSphere(200); \n\n        particleStar.velocity = THREE.MathUtils.randInt(50, 300);\n\n        particleStar.startX = particleStar.x;\n        particleStar.startY = particleStar.y;\n        particleStar.startZ = particleStar.z;\n\n        starsGeometry.vertices.push(particleStar);\n    }\n    var starsMaterial = new THREE.PointsMaterial({\n        size: 4,\n        color: \"#ffffff\",\n        transparent: true,\n        opacity: 0.75, //more than semi-transparent\n        map: textureStar,\n        blending: THREE.AdditiveBlending, //found this to make the drinking bird tail more transparent\n    });\n\n    stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n\n\n    //fixed stars\n    function createStars(texture, size, total) {\n        var pointGeometry = new THREE.Geometry();\n        var pointMaterial = new THREE.PointsMaterial({\n            size: size,\n            map: texture,\n            blending: THREE.AdditiveBlending,                      \n        });\n\n        for (var i = 0; i < total; i++) {\n            var radius = THREE.MathUtils.randInt(75, 150); \n            var particles = randomPointSphere(radius);\n            pointGeometry.vertices.push(particles);\n        }\n        return new THREE.Points(pointGeometry, pointMaterial);\n    }\n    scene.add(createStars(texture1, 15, 25));   \n    scene.add(createStars(texture2, 5, 35));\n    scene.add(createStars(texture2, 2, 50));\n\n    function randomPointSphere (radius) {\n        var theta = 2 * Math.PI * Math.random();\n        var phi = Math.acos(2 * Math.random() - 1);\n        var dx = 0 + (radius * Math.sin(phi) * Math.cos(theta));\n        var dy = 0 + (radius * Math.sin(phi) * Math.sin(theta));\n        var dz = 0 + (radius * Math.cos(phi));\n        return new THREE.Vector3(dx, dy, dz);\n    }\n}\n\n\nfunction animate() {\n\n    //moving stars\n    stars.geometry.vertices.forEach(function (v) {\n        //move all the stars to the center\n        v.x += (0 - v.x) / v.velocity;\n        v.y += (0 - v.y) / v.velocity;\n        v.z += (0 - v.z) / v.velocity;\n\n        v.velocity -= 0.2;\n        //set back to origin\n        if (v.x <= 5 && v.x >= -5 && v.z <= 5 && v.z >= -5) {\n            v.x = v.startX;\n            v.y = v.startY;\n            v.z = v.startZ;\n            v.velocity = THREE.MathUtils.randInt(50, 300);\n        }\n    });\n\n\n    //blob animation\n    blob.geometry.vertices.forEach(function (v) {\n        var time = Date.now();\n        v.normalize();\n        var distance = blob.geometry.parameters.radius + noise.noise3D(\n            //channge to big numbers to make blob dance like crazy\n            v.x + time * 0.0006, \n            v.y + time * 0.0004,\n            v.z + time * 0.0009\n        ) * blobScale;\n        v.multiplyScalar(distance);\n    })\n    blob.geometry.verticesNeedUpdate = true;\n    blob.geometry.normalsNeedUpdate = true;\n    blob.geometry.computeVertexNormals();\n    blob.geometry.computeFaceNormals();\n    blob.rotation.y += 0.002;\n\n\n    //Sphere background rotation\n    BigSphere.rotation.x += 0.001;\n    BigSphere.rotation.y += 0.001;\n    BigSphere.rotation.z += 0.001;\n\n    \n    controls.update();\n    stars.geometry.verticesNeedUpdate = true;\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n}\n\n\ninit();\nanimate();\n\n\n//Resize window\nwindow.addEventListener( 'resize', onWindowResize, false );\n\nfunction onWindowResize() {\n\n\tvar canvasWidth = window.innerWidth;\n\tvar canvasHeight = window.innerHeight;\n\n\trenderer.setSize( canvasWidth, canvasHeight );\n\n\tcamera.aspect = canvasWidth/ canvasHeight;\n\tcamera.updateProjectionMatrix();\n\n}\n\n"],"names":["renderer","scene","camera","BigSphere","blob","stars","controls","noise","SimplexNoise","init","THREE","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","set","directionalLight","DirectionalLight","add","ambientLight","AmbientLight","WebGLRenderer","antialias","alpha","container","document","getElementById","setSize","clientWidth","clientHeight","setPixelRatio","devicePixelRatio","appendChild","domElement","OrbitControls","autoRotate","autoRotateSpeed","maxDistance","minDistance","loader","TextureLoader","textureBigSphere","load","textureblob","textureStar","texture1","texture2","icosahedronGeometry","IcosahedronGeometry","blobtMaterial","MeshPhongMaterial","map","Mesh","geometryBigSphere","SphereBufferGeometry","materialBigSphere","MeshBasicMaterial","side","BackSide","starsGeometry","Geometry","i","particleStar","randomPointSphere","velocity","MathUtils","randInt","startX","x","startY","y","startZ","z","vertices","push","starsMaterial","PointsMaterial","size","color","transparent","opacity","blending","AdditiveBlending","createStars","texture","total","pointGeometry","pointMaterial","particles","Points","radius","theta","Math","PI","random","phi","acos","dx","sin","cos","dy","dz","Vector3","animate","geometry","forEach","v","time","Date","now","normalize","distance","parameters","noise3D","multiplyScalar","verticesNeedUpdate","normalsNeedUpdate","computeVertexNormals","computeFaceNormals","rotation","update","render","requestAnimationFrame","addEventListener","canvasWidth","canvasHeight","aspect","updateProjectionMatrix"],"version":3,"file":"index.a0c6c241.js.map"}