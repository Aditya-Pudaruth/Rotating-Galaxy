{"mappings":"ACsDA,MAAM,cAAc,CAAG,SAAW,CAAI,CAAE,CAAQ,CAAE,CAAM,CAAE,CAAG,CAAE,CAAI,CAAE,CAAM,CAAE,CAAK,EAKjF,IAqZI,EAAG,EAAG,EAiBN,EAEA,EAAO,EACP,EAEA,EAAG,EAAG,EAAM,EAAM,EAAG,EAAO,EAG5B,EAAI,EAAI,EAAI,EA9aZ,EAAgB,CAErB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GACnC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC3C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAE1C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAC7C,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IACjD,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACvD,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAEtD,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAC3D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAE5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAE5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAE5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAC3D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GACvD,CAEG,EAAiB,CACtB,IAAI,EAAE,IACN,IAAI,MAAO,IACX,KAAM,KAAK,IACX,EAAE,KAAK,IACP,OAAO,EAAE,QACT,OAAO,MAAO,QACd,KAAM,QAAQ,QACd,EAAE,QAAQ,QACV,OAAO,EAAE,QACT,OAAO,MAAO,QACd,KAAM,QAAQ,QACd,EAAE,QAAQ,QACV,IAAI,EAAE,IACN,IAAI,KAAM,IACV,IAAK,KAAK,IACV,EAAE,KAAK,IACP,MAAO,KAAK,IACZ,KAAK,MAAO,IACZ,KAAK,EAAE,IACP,MAAO,QAAQ,QACf,QAAQ,MAAO,QACf,QAAQ,EAAE,QACV,MAAO,QAAQ,QACf,QAAQ,MAAO,QACf,QAAQ,EAAE,QACV,KAAM,KAAK,IACX,KAAK,KAAM,IACX,KAAK,EAAE,IACP,KAAK,KAAM,IACX,MAAO,IAAI,IACX,EAAE,IAAI,IACN,QAAQ,KAAM,QACd,MAAO,OAAO,QACd,EAAE,OAAO,QACT,QAAQ,KAAM,QACd,MAAO,OAAO,QACd,EAAE,OAAO,QACT,KAAK,IAAK,IACV,KAAM,IAAI,IACV,EAAE,IAAI,IACN,KAAM,IAAI,IACV,IAAI,KAAM,IACV,KAAM,OAAO,QACb,OAAO,KAAM,QACb,KAAM,OAAO,QACb,OAAO,KAAM,QACb,IAAK,IAAI,IACT,IAAI,IAAK,IACT,KAAK,EAAE,MACP,KAAK,KAAM,MACX,IAAK,MAAM,MACX,EAAE,MAAM,MACR,EAAE,EAAE,KACJ,EAAE,MAAM,KACR,KAAK,GAAG,KACR,EAAE,GAAG,KACL,EAAE,EAAE,GACJ,EAAE,MAAM,GACR,KAAK,GAAG,GACR,EAAE,GAAG,GACL,KAAM,MAAM,MACZ,MAAM,KAAM,MACZ,MAAM,EAAE,MACR,MAAM,GAAG,KACT,GAAG,MAAM,KACT,GAAG,EAAE,KACL,MAAM,GAAG,GACT,GAAG,MAAM,GACT,GAAG,EAAE,GACL,MAAM,IAAK,MACX,KAAM,KAAK,MACX,EAAE,KAAK,MACP,GAAG,KAAK,KACR,MAAM,EAAE,KACR,EAAE,EAAE,KACJ,GAAG,KAAK,GACR,MAAM,EAAE,GACR,EAAE,EAAE,GACJ,IAAK,KAAK,MACV,KAAK,IAAK,MACV,KAAK,EAAE,KACP,EAAE,KAAK,KACP,KAAK,EAAE,GACP,EAAE,KAAK,GACP,EAAE,EAAE,IACJ,EAAE,MAAM,IACR,KAAK,GAAG,IACR,EAAE,GAAG,IACL,IAAI,EAAE,KACN,IAAI,KAAM,KACV,IAAK,KAAK,KACV,EAAE,KAAK,KACP,IAAI,EAAE,IACN,IAAI,KAAM,IACV,IAAK,KAAK,IACV,EAAE,KAAK,IACP,MAAM,GAAG,IACT,GAAG,MAAM,IACT,GAAG,EAAE,IACL,KAAM,KAAK,KACX,KAAK,KAAM,KACX,KAAK,EAAE,KACP,KAAM,KAAK,IACX,KAAK,KAAM,IACX,KAAK,EAAE,IACP,GAAG,KAAK,IACR,MAAM,EAAE,IACR,EAAE,EAAE,IACJ,KAAK,IAAK,KACV,KAAM,IAAI,KACV,EAAE,IAAI,KACN,KAAK,IAAK,IACV,KAAM,IAAI,IACV,EAAE,IAAI,IACN,KAAK,EAAE,IACP,EAAE,KAAK,IACP,IAAK,IAAI,KACT,IAAI,IAAK,KACT,IAAK,IAAI,IACT,IAAI,IAAK,IACT,KAAK,EAAE,MACP,KAAK,IAAK,MACV,KAAK,IAAK,KACV,KAAK,EAAE,KACP,KAAK,EAAE,MACP,KAAK,IAAK,MACV,KAAK,IAAK,KACV,KAAK,EAAE,KACP,KAAK,EAAE,MACP,KAAK,IAAK,MACV,GAAG,IAAK,KACR,GAAG,EAAE,KACL,KAAK,EAAE,IACP,KAAK,IAAK,IACV,GAAG,IAAK,IACR,GAAG,EAAE,IACL,KAAK,GAAI,KACT,KAAK,GAAI,MACT,KAAK,GAAI,KACT,KAAK,GAAI,MACT,GAAG,GAAI,KACP,KAAK,GAAI,MACT,GAAG,GAAI,IACP,KAAK,GAAI,IACT,KAAK,EAAE,MACP,KAAK,IAAK,MACV,GAAG,IAAK,KACR,GAAG,EAAE,KACL,KAAK,EAAE,MACP,KAAK,IAAK,MACV,MAAM,IAAK,MACX,MAAM,EAAE,MACR,GAAG,IAAK,GACR,KAAK,IAAK,GACV,KAAK,EAAE,GACP,GAAG,GAAI,KACP,KAAK,GAAI,MACT,MAAM,GAAI,MACV,KAAK,GAAI,MACT,KAAK,GAAI,GACT,GAAG,GAAI,GACP,IAAI,EAAE,MACN,IAAI,KAAM,MACV,IAAI,KAAM,GACV,IAAI,EAAE,GACN,IAAI,EAAE,MACN,IAAI,KAAM,MACV,IAAI,KAAM,KACV,IAAI,EAAE,KACN,IAAI,EAAE,IACN,IAAI,KAAM,IACV,IAAI,KAAM,MACV,IAAI,EAAE,MACN,IAAI,EAAE,IACN,IAAI,KAAM,IACV,IAAI,KAAM,IACV,IAAI,EAAE,IACN,IAAI,IAAK,GACT,IAAI,IAAK,MACT,IAAI,IAAK,KACT,IAAI,IAAK,MACT,IAAI,IAAK,MACT,IAAI,IAAK,IACT,IAAI,IAAK,IACT,IAAI,IAAK,IACT,IAAI,EAAE,MACN,IAAI,KAAM,MACV,MAAM,KAAM,QACZ,MAAM,EAAE,QACR,IAAI,EAAE,MACN,IAAI,KAAM,MACV,KAAK,KAAM,OACX,KAAK,EAAE,OACP,IAAI,EAAE,IACN,IAAI,KAAM,IACV,IAAI,KAAM,IACV,IAAI,EAAE,IACN,MAAM,IAAK,QACX,IAAI,IAAK,MACT,KAAK,IAAK,OACV,IAAI,IAAK,MACT,IAAI,IAAK,IACT,IAAI,IAAK,IACT,EAAE,EAAE,KACJ,GAAI,EAAE,KACN,GAAI,KAAM,KACV,IAAK,IAAK,KACV,EAAE,IAAK,KACP,EAAE,EAAE,KACJ,GAAI,EAAE,IACN,GAAI,MAAO,IACX,KAAM,IAAK,IACX,EAAE,IAAK,IACP,KAAM,IAAK,KACX,IAAK,KAAM,KACX,IAAK,EAAE,KACP,MAAO,IAAK,IACZ,IAAK,MAAO,IACZ,IAAK,EAAE,IACP,IAAK,IAAK,KACV,KAAM,GAAI,KACV,EAAE,GAAI,KACN,IAAK,KAAM,IACX,MAAO,GAAI,IACX,EAAE,GAAI,IACN,IAAK,GAAI,KACT,GAAI,IAAK,KACT,KAAM,GAAI,IACV,GAAI,KAAM,IACV,GAAI,EAAE,KACN,GAAI,MAAO,KACX,KAAM,IAAK,KACX,EAAE,IAAK,KACP,IAAI,EAAE,KACN,IAAI,MAAO,KACX,KAAM,KAAK,KACX,EAAE,KAAK,KACP,IAAI,EAAE,IACN,IAAI,MAAO,IACX,KAAM,KAAK,IACX,EAAE,KAAK,IACP,MAAO,IAAK,KACZ,IAAK,MAAO,KACZ,IAAK,EAAE,KACP,MAAO,KAAK,KACZ,KAAK,MAAO,KACZ,KAAK,EAAE,KACP,MAAO,KAAK,IACZ,KAAK,MAAO,IACZ,KAAK,EAAE,IACP,IAAK,KAAM,KACX,MAAO,GAAI,KACX,EAAE,GAAI,KACN,KAAK,KAAM,KACX,MAAO,IAAI,KACX,EAAE,IAAI,KACN,KAAK,KAAM,IACX,MAAO,IAAI,IACX,EAAE,IAAI,IACN,KAAM,GAAI,KACV,GAAI,KAAM,KACV,KAAM,IAAI,KACV,IAAI,KAAM,KACV,KAAM,IAAI,IACV,IAAI,KAAM,IACV,EAAE,EAAE,EACJ,MAAM,EAAE,EACR,MAAM,KAAM,EACZ,KAAM,MAAM,EACZ,EAAE,MAAM,EACR,IAAI,EAAE,KACN,IAAI,IAAK,KACT,IAAK,IAAI,KACT,EAAE,IAAI,KACN,MAAO,MAAM,EACb,OAAO,KAAM,EACb,OAAO,EAAE,EACT,KAAM,IAAI,KACV,KAAK,IAAK,KACV,KAAK,EAAE,KACP,OAAO,MAAO,EACd,MAAO,OAAO,EACd,EAAE,OAAO,EACT,KAAK,KAAM,KACX,KAAM,KAAK,KACX,EAAE,KAAK,KACP,KAAM,OAAO,EACb,MAAM,MAAO,EACb,IAAK,KAAK,KACV,IAAI,KAAM,KACR,CAED,MAAM,QAAQ,CAAC,IAAI,CAAE,IAAI,EAEzB,IAAI,CAAC,IAAI,CAAG,iBAEZ,IAAI,CAAC,UAAU,CAAG,CACjB,KAAM,EACN,SAAU,EACV,OAAQ,EACR,IAAK,EACL,KAAM,EACN,OAAQ,EACR,MAAO,CACR,EAEA,EAAO,GAAQ,GAGf,EAAW,AAAa,KAAA,IAAb,EAAyB,KAAK,GAAG,CAAE,EAAG,KAAK,KAAK,CAAE,IAAc,IAAO,GAGlF,EAAS,AAAW,KAAA,IAAX,GAA8B,EACvC,EAAM,AAAQ,KAAA,IAAR,GAA2B,EACjC,EAAO,AAAS,KAAA,IAAT,GAA4B,EAGnC,EAAS,AAAW,KAAA,IAAX,GAA+B,EAexC,IAAI,EAAa,AAFD,KAAS,CAAA,AAHzB,CAAA,EAAQ,AAAU,KAAA,IAAV,GAA6B,CAArC,EAGiC,EAJhB,GAIoB,EAER,EACzB,EAAW,EAAO,EAQlB,EAAc,EAAS,EAAI,EAE/B,GADe,CAAA,EAAM,EAAI,CAAA,EACV,CAAA,EAAO,GAAK,CAAA,EAC3B,GAAiB,AAAA,CAAA,EAAW,CAAA,EAAQ,CAAA,EAAW,CAAA,EAG/C,IAAI,EAAU,EAAE,CACZ,EAAM,EAAE,CACZ,IAAM,EAAI,EAAG,EAAI,EAAa,IAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,IAAI,MAAM,OAAO,EACrC,EAAQ,IAAI,CAAE,IAAI,MAAM,OAAO,EAC/B,EAAI,IAAI,CAAE,IAAI,MAAM,OAAO,EAI5B,IAAI,EAAK,IAAI,MAAM,OAAO,CAC1B,EAAG,GAAG,CAAE,GAAO,EAAK,GAAO,EACxB,EAAK,GAAO,EAAM,EACnB,GAAO,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,GAErB,IAAI,EAAI,EAAE,CAGN,EAAK,EAAE,CACP,EAAK,EAAE,CACP,EAAM,EAAE,CACR,EAAM,EAAE,CAIR,EAAM,EAAE,CAER,EAAO,EAAE,CACT,EAAO,EAAE,CACT,EAAO,EAAE,CAET,EAAO,IAAI,MAAM,OAAO,CASxB,EAAU,IAAI,MAAM,OAAO,CAG3B,EAAM,IAAI,MAAM,OAAO,CACvB,EAAO,IAAI,MAAM,OAAO,CAExB,EAAM,IAAI,MAAM,OAAO,CACvB,EAAM,IAAI,MAAM,OAAO,CACvB,EAAO,IAAI,MAAM,OAAO,CACxB,EAAO,IAAI,MAAM,OAAO,CAExB,EAAQ,IAAI,MAAM,OAAO,CACzB,EAAQ,IAAI,MAAM,OAAO,CAEzB,EAAM,EAAG,KAAK,GAClB,EAAI,SAAS,GAIb,IAAI,EAAgB,SAAW,CAAI,CAAE,CAAI,CAAE,CAAI,UAGzC,EAAK,MAAM,CAAE,IACb,EAAK,MAAM,CAAE,IACb,EAAK,MAAM,CAAE,GAGnB,EAGA,IAAM,EAAI,EAAG,EAAI,EAAG,IAGnB,CAAG,CAAE,EAAG,CAAG,IAAI,MAAM,OAAO,CAI7B,IAAI,GAAa,EAAO,EAAI,GACxB,GAAa,EAAS,GAAK,GAE/B,EAAa,EAAW,EASxB,IAAM,IALF,GAAY,EACZ,GAAY,EACZ,GAAY,EACZ,GAAU,EAEJ,GAAO,GAAa,GAAO,GAAa,KAIjD,GAAK,GAAS,GAAO,IAAM,IAAQ,GAAO,CAGzC,IAAM,EAAI,EAAI,EAAI,EAAI,IAAO,CAG5B,IAAM,EAAI,EAAI,EAAI,EAAI,IAErB,IAAM,EAAI,EAAI,EAAI,EAAI,IAGrB,CAAC,CAAE,AAAI,EAAJ,EAAQ,EAAG,CAAG,CAAc,CAAE,AAAyC,EAAzC,CAAa,CAAE,AAAO,GAAP,GAAY,AAAI,EAAJ,EAAQ,EAAG,CAAO,EAAG,CAI5E,GAAY,IAAQ,IAAM,GAAO,IAAU,AAAM,IAAN,GAK/C,CAAA,CAAC,CAAE,AAAI,EAAJ,EAAQ,EAAG,EAAI,KAAlB,EAMM,GAAW,AAAM,IAAN,GAEjB,CAAA,CAAC,CAAE,AAAI,EAAJ,EAAQ,EAAG,EA9IH,GA4IZ,EAUF,EAAI,GAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,EAAG,CAAE,CAAC,CAAE,GAAI,CAAE,CAAC,CAAE,GAAI,CAAE,CAAC,CAAE,GAAI,CAAE,CAAC,CAAE,GAAI,CAAE,CAAC,CAAE,GAAI,CAAE,CAAC,CAAE,GAAI,EAE7I,EAAK,gBAAgB,CAAE,EAAK,GAC5B,CAAG,CAAE,EAAG,CAAC,gBAAgB,CAAE,EAAK,EAEjC,CAGA,IAAM,EAAQ,EAAI,GAAS,EAAW,IAIrC,IAAM,EAAQ,EAFd,EAAI,EAAQ,EAEM,GAAS,EAAW,IAAW,CAMhD,IAAM,EAAI,EAJV,EAAI,EAAQ,EAIC,EAAO,EAAO,EAAM,KAEhC,CAAE,CAAE,EAAG,CAAG,EACV,CAAE,CAAE,EAAG,CAAG,EACV,GAAQ,EACR,GAAQ,EAEH,AAAM,IAAN,GAEJ,CAAG,CAAE,EAAG,CAAG,CAAG,CAAE,EAAG,CAAG,EACtB,EAAQ,EAAQ,IAIhB,CAAG,CAAE,EAAG,CAAG,EAAU,CAAA,EAAI,CAAA,EACzB,CAAG,CAAE,EAAG,CAAG,EAAU,CAAA,EAAI,CAAA,EACzB,GAAS,EACT,GAAS,GAYX,IANA,EAAI,GAAG,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,EACnC,EAAI,GAAG,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,EACnC,EAAK,GAAG,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,EACxC,EAAK,GAAG,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,CAAE,CAAG,CAAC,EAAE,EAGlC,EAAI,EAAI,EAAI,EAAI,IAIrB,AADA,CAAA,EAAS,EAAI,KAAK,EAAlB,EACO,YAAY,CAAE,CAAG,CAAE,EAAG,EAC7B,CAAI,CAAE,EAAG,CAAG,EAAO,GAAG,CAAE,GAIxB,AADA,CAAA,EAAS,EAAK,KAAK,EAAnB,EACO,YAAY,CAAE,CAAG,CAAE,EAAG,EAC7B,CAAI,CAAE,EAAG,CAAG,EAAO,GAAG,CAAE,GAGxB,AADA,CAAA,EAAS,EAAI,KAAK,EAAlB,EACO,YAAY,CAAE,CAAG,CAAE,EAAG,EAC7B,CAAI,CAAE,EAAG,CAAG,EAAO,GAAG,CAAE,GAKzB,EAAM,GAAG,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,EAC7C,EAAM,GAAG,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,EAC7C,EAAK,YAAY,CAAE,EAAO,GAC1B,EAAK,SAAS,GAGT,AAAc,IAAd,CAAI,CAAE,EAAG,EAAU,AAAc,IAAd,CAAI,CAAE,EAAG,CAIhC,EAAQ,GAAG,CAAE,EAAG,CAAI,CAAE,EAAG,CAAG,EAAa,EAAI,GAAK,GAOlD,EAAQ,GAAG,CAAE,EAAK,CAAC,CAAE,EAAK,CAAC,CAAE,CAAE,EAAK,CAAC,EAMtC,IAAI,CAAC,QAAQ,CAAC,KAAY,CAAC,GAAG,CAAE,EAAW,CAAI,CAAE,EAAG,CAAE,EAAa,CAAA,CAAI,CAAE,EAAG,CAAG,CAAA,EAAc,CAAE,EAAW,CAAI,CAAE,EAAG,EAEnH,CAAO,CAAE,KAAc,CAAC,GAAG,CAAE,EAAQ,CAAC,CAAE,EAAQ,CAAC,CAAE,EAAQ,CAAC,EAE5D,CAAG,CAAE,KAAY,CAAC,GAAG,CAAE,EAAI,EAAG,EAAI,EAEnC,CAKD,IAAM,EAAQ,EAAI,EAAQ,EAAW,IAEpC,IAAM,EAAQ,EAAI,EAAQ,EAAW,IAIpC,EAAK,AADL,CAAA,EAAK,AADL,CAAA,EAAK,GAAY,EAAa,EAAa,EAAQ,EAAa,CAAhE,EACU,CAAA,EACA,EACV,EAAK,EAAK,EAIL,EAAgB,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAE,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAE,IAAI,CAAC,QAAQ,CAAC,EAAG,IAE3E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,MAAM,KAAK,CAAE,EAAI,EAAI,EAAI,CAAE,CAAO,CAAC,EAAG,CAAE,CAAO,CAAC,EAAG,CAAE,CAAO,CAAC,EAAG,CAAE,GACvF,IAAI,CAAC,aAAa,CAAE,EAAG,CAAC,IAAI,CAAE,CAAE,CAAG,CAAC,EAAG,CAAE,CAAG,CAAC,EAAG,CAAE,CAAG,CAAC,EAAG,CAAE,GAGvD,EAAgB,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAE,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAE,IAAI,CAAC,QAAQ,CAAC,EAAG,IAE3E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,MAAM,KAAK,CAAE,EAAI,EAAI,EAAI,CAAE,CAAO,CAAC,EAAG,CAAE,CAAO,CAAC,EAAG,CAAE,CAAO,CAAC,EAAG,CAAE,GACvF,IAAI,CAAC,aAAa,CAAE,EAAG,CAAC,IAAI,CAAE,CAAE,CAAG,CAAC,EAAG,CAAE,CAAG,CAAC,EAAG,CAAE,CAAG,CAAC,EAAG,CAAE,EAS9D,CAAA,IAED,CAID,IAAI,CAAC,gBAAgB,GACrB,IAAI,CAAC,kBAAkB,GACvB,IAAI,CAAC,aAAa,EAEnB,EAGA,MAAM,cAAc,CAAC,SAAS,CAAG,OAAO,MAAM,CAAE,MAAM,QAAQ,CAAC,SAAS,EACxE,MAAM,cAAc,CAAC,SAAS,CAAC,WAAW,CAAG,MAAM,cAAc,CAEjE,MAAM,cAAc,CAAC,SAAS,CAAC,KAAK,CAAG,WAYtC,OAVe,IAAI,MAAM,cAAc,CACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CACpB,IAAI,CAAC,UAAU,CAAC,QAAQ,CACxB,IAAI,CAAC,UAAU,CAAC,MAAM,CACtB,IAAI,CAAC,UAAU,CAAC,GAAG,CACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CACtB,IAAI,CAAC,UAAU,CAAC,KAAK,CAKvB","sources":["<anon>","lib/uclass_TeapotGeometry.js"],"sourcesContent":["/**\n * @author Eric Haines / http://erichaines.com/\n *\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * THREE.TeapotGeometry = function ( size, segments, bottom, lid, body, fitLid, blinn )\n *\n * defaults: size = 50, segments = 10, bottom = true, lid = true, body = true,\n *   fitLid = false, blinn = true\n *\n * size is a relative scale: I've scaled the teapot to fit vertically between -1 and 1.\n * Think of it as a \"radius\".\n * segments - number of line segments to subdivide each patch edge;\n *   1 is possible but gives degenerates, so two is the real minimum.\n * bottom - boolean, if true (default) then the bottom patches are added. Some consider\n *   adding the bottom heresy, so set this to \"false\" to adhere to the One True Way.\n * lid - to remove the lid and look inside, set to true.\n * body - to remove the body and leave the lid, set this and \"bottom\" to false.\n * fitLid - the lid is a tad small in the original. This stretches it a bit so you can't\n *   see the teapot's insides through the gap.\n * blinn - Jim Blinn scaled the original data vertically by dividing by about 1.3 to look\n *   nicer. If you want to see the original teapot, similar to the real-world model, set\n *   this to false. True by default.\n *   See http://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg for the original\n *   real-world teapot (from http://en.wikipedia.org/wiki/Utah_teapot).\n *\n * Note that the bottom (the last four patches) is not flat - blame Frank Crow, not me.\n *\n * The teapot should normally be rendered as a double sided object, since for some \n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output.\n *   Total triangles = 32*2*n*n - 8*n    [degenerates at the top and bottom cusps are deleted]\n *\n *   size_factor   # triangles\n *       1          56\n *       2         240\n *       3         552\n *       4         992\n *\n *      10        6320\n *      20       25440\n *      30       57360\n *\n * Code converted from my ancient SPD software, http://tog.acm.org/resources/SPD/\n * Created for the Udacity course \"Interactive Rendering\", http://bit.ly/ericity\n * Lesson: https://www.udacity.com/course/viewer#!/c-cs291/l-68866048/m-106482448\n * YouTube video on teapot history: https://www.youtube.com/watch?v=DxMfblPzFNc\n *\n * See https://en.wikipedia.org/wiki/Utah_teapot for the history of the teapot\n *\n */ /*global THREE */ THREE.TeapotGeometry = function(size, segments, bottom, lid, body, fitLid, blinn) {\n    \"use strict\";\n    // 32 * 4 * 4 Bezier spline patches\n    var teapotPatches = [\n        /*rim*/ 0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        3,\n        16,\n        17,\n        18,\n        7,\n        19,\n        20,\n        21,\n        11,\n        22,\n        23,\n        24,\n        15,\n        25,\n        26,\n        27,\n        18,\n        28,\n        29,\n        30,\n        21,\n        31,\n        32,\n        33,\n        24,\n        34,\n        35,\n        36,\n        27,\n        37,\n        38,\n        39,\n        30,\n        40,\n        41,\n        0,\n        33,\n        42,\n        43,\n        4,\n        36,\n        44,\n        45,\n        8,\n        39,\n        46,\n        47,\n        12,\n        /*body*/ 12,\n        13,\n        14,\n        15,\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57,\n        58,\n        59,\n        15,\n        25,\n        26,\n        27,\n        51,\n        60,\n        61,\n        62,\n        55,\n        63,\n        64,\n        65,\n        59,\n        66,\n        67,\n        68,\n        27,\n        37,\n        38,\n        39,\n        62,\n        69,\n        70,\n        71,\n        65,\n        72,\n        73,\n        74,\n        68,\n        75,\n        76,\n        77,\n        39,\n        46,\n        47,\n        12,\n        71,\n        78,\n        79,\n        48,\n        74,\n        80,\n        81,\n        52,\n        77,\n        82,\n        83,\n        56,\n        56,\n        57,\n        58,\n        59,\n        84,\n        85,\n        86,\n        87,\n        88,\n        89,\n        90,\n        91,\n        92,\n        93,\n        94,\n        95,\n        59,\n        66,\n        67,\n        68,\n        87,\n        96,\n        97,\n        98,\n        91,\n        99,\n        100,\n        101,\n        95,\n        102,\n        103,\n        104,\n        68,\n        75,\n        76,\n        77,\n        98,\n        105,\n        106,\n        107,\n        101,\n        108,\n        109,\n        110,\n        104,\n        111,\n        112,\n        113,\n        77,\n        82,\n        83,\n        56,\n        107,\n        114,\n        115,\n        84,\n        110,\n        116,\n        117,\n        88,\n        113,\n        118,\n        119,\n        92,\n        /*handle*/ 120,\n        121,\n        122,\n        123,\n        124,\n        125,\n        126,\n        127,\n        128,\n        129,\n        130,\n        131,\n        132,\n        133,\n        134,\n        135,\n        123,\n        136,\n        137,\n        120,\n        127,\n        138,\n        139,\n        124,\n        131,\n        140,\n        141,\n        128,\n        135,\n        142,\n        143,\n        132,\n        132,\n        133,\n        134,\n        135,\n        144,\n        145,\n        146,\n        147,\n        148,\n        149,\n        150,\n        151,\n        68,\n        152,\n        153,\n        154,\n        135,\n        142,\n        143,\n        132,\n        147,\n        155,\n        156,\n        144,\n        151,\n        157,\n        158,\n        148,\n        154,\n        159,\n        160,\n        68,\n        /*spout*/ 161,\n        162,\n        163,\n        164,\n        165,\n        166,\n        167,\n        168,\n        169,\n        170,\n        171,\n        172,\n        173,\n        174,\n        175,\n        176,\n        164,\n        177,\n        178,\n        161,\n        168,\n        179,\n        180,\n        165,\n        172,\n        181,\n        182,\n        169,\n        176,\n        183,\n        184,\n        173,\n        173,\n        174,\n        175,\n        176,\n        185,\n        186,\n        187,\n        188,\n        189,\n        190,\n        191,\n        192,\n        193,\n        194,\n        195,\n        196,\n        176,\n        183,\n        184,\n        173,\n        188,\n        197,\n        198,\n        185,\n        192,\n        199,\n        200,\n        189,\n        196,\n        201,\n        202,\n        193,\n        /*lid*/ 203,\n        203,\n        203,\n        203,\n        204,\n        205,\n        206,\n        207,\n        208,\n        208,\n        208,\n        208,\n        209,\n        210,\n        211,\n        212,\n        203,\n        203,\n        203,\n        203,\n        207,\n        213,\n        214,\n        215,\n        208,\n        208,\n        208,\n        208,\n        212,\n        216,\n        217,\n        218,\n        203,\n        203,\n        203,\n        203,\n        215,\n        219,\n        220,\n        221,\n        208,\n        208,\n        208,\n        208,\n        218,\n        222,\n        223,\n        224,\n        203,\n        203,\n        203,\n        203,\n        221,\n        225,\n        226,\n        204,\n        208,\n        208,\n        208,\n        208,\n        224,\n        227,\n        228,\n        209,\n        209,\n        210,\n        211,\n        212,\n        229,\n        230,\n        231,\n        232,\n        233,\n        234,\n        235,\n        236,\n        237,\n        238,\n        239,\n        240,\n        212,\n        216,\n        217,\n        218,\n        232,\n        241,\n        242,\n        243,\n        236,\n        244,\n        245,\n        246,\n        240,\n        247,\n        248,\n        249,\n        218,\n        222,\n        223,\n        224,\n        243,\n        250,\n        251,\n        252,\n        246,\n        253,\n        254,\n        255,\n        249,\n        256,\n        257,\n        258,\n        224,\n        227,\n        228,\n        209,\n        252,\n        259,\n        260,\n        229,\n        255,\n        261,\n        262,\n        233,\n        258,\n        263,\n        264,\n        237,\n        /*bottom*/ 265,\n        265,\n        265,\n        265,\n        266,\n        267,\n        268,\n        269,\n        270,\n        271,\n        272,\n        273,\n        92,\n        119,\n        118,\n        113,\n        265,\n        265,\n        265,\n        265,\n        269,\n        274,\n        275,\n        276,\n        273,\n        277,\n        278,\n        279,\n        113,\n        112,\n        111,\n        104,\n        265,\n        265,\n        265,\n        265,\n        276,\n        280,\n        281,\n        282,\n        279,\n        283,\n        284,\n        285,\n        104,\n        103,\n        102,\n        95,\n        265,\n        265,\n        265,\n        265,\n        282,\n        286,\n        287,\n        266,\n        285,\n        288,\n        289,\n        270,\n        95,\n        94,\n        93,\n        92\n    ];\n    var teapotVertices = [\n        1.4,\n        0,\n        2.4,\n        1.4,\n        -0.784,\n        2.4,\n        0.784,\n        -1.4,\n        2.4,\n        0,\n        -1.4,\n        2.4,\n        1.3375,\n        0,\n        2.53125,\n        1.3375,\n        -0.749,\n        2.53125,\n        0.749,\n        -1.3375,\n        2.53125,\n        0,\n        -1.3375,\n        2.53125,\n        1.4375,\n        0,\n        2.53125,\n        1.4375,\n        -0.805,\n        2.53125,\n        0.805,\n        -1.4375,\n        2.53125,\n        0,\n        -1.4375,\n        2.53125,\n        1.5,\n        0,\n        2.4,\n        1.5,\n        -0.84,\n        2.4,\n        0.84,\n        -1.5,\n        2.4,\n        0,\n        -1.5,\n        2.4,\n        -0.784,\n        -1.4,\n        2.4,\n        -1.4,\n        -0.784,\n        2.4,\n        -1.4,\n        0,\n        2.4,\n        -0.749,\n        -1.3375,\n        2.53125,\n        -1.3375,\n        -0.749,\n        2.53125,\n        -1.3375,\n        0,\n        2.53125,\n        -0.805,\n        -1.4375,\n        2.53125,\n        -1.4375,\n        -0.805,\n        2.53125,\n        -1.4375,\n        0,\n        2.53125,\n        -0.84,\n        -1.5,\n        2.4,\n        -1.5,\n        -0.84,\n        2.4,\n        -1.5,\n        0,\n        2.4,\n        -1.4,\n        0.784,\n        2.4,\n        -0.784,\n        1.4,\n        2.4,\n        0,\n        1.4,\n        2.4,\n        -1.3375,\n        0.749,\n        2.53125,\n        -0.749,\n        1.3375,\n        2.53125,\n        0,\n        1.3375,\n        2.53125,\n        -1.4375,\n        0.805,\n        2.53125,\n        -0.805,\n        1.4375,\n        2.53125,\n        0,\n        1.4375,\n        2.53125,\n        -1.5,\n        0.84,\n        2.4,\n        -0.84,\n        1.5,\n        2.4,\n        0,\n        1.5,\n        2.4,\n        0.784,\n        1.4,\n        2.4,\n        1.4,\n        0.784,\n        2.4,\n        0.749,\n        1.3375,\n        2.53125,\n        1.3375,\n        0.749,\n        2.53125,\n        0.805,\n        1.4375,\n        2.53125,\n        1.4375,\n        0.805,\n        2.53125,\n        0.84,\n        1.5,\n        2.4,\n        1.5,\n        0.84,\n        2.4,\n        1.75,\n        0,\n        1.875,\n        1.75,\n        -0.98,\n        1.875,\n        0.98,\n        -1.75,\n        1.875,\n        0,\n        -1.75,\n        1.875,\n        2,\n        0,\n        1.35,\n        2,\n        -1.12,\n        1.35,\n        1.12,\n        -2,\n        1.35,\n        0,\n        -2,\n        1.35,\n        2,\n        0,\n        0.9,\n        2,\n        -1.12,\n        0.9,\n        1.12,\n        -2,\n        0.9,\n        0,\n        -2,\n        0.9,\n        -0.98,\n        -1.75,\n        1.875,\n        -1.75,\n        -0.98,\n        1.875,\n        -1.75,\n        0,\n        1.875,\n        -1.12,\n        -2,\n        1.35,\n        -2,\n        -1.12,\n        1.35,\n        -2,\n        0,\n        1.35,\n        -1.12,\n        -2,\n        0.9,\n        -2,\n        -1.12,\n        0.9,\n        -2,\n        0,\n        0.9,\n        -1.75,\n        0.98,\n        1.875,\n        -0.98,\n        1.75,\n        1.875,\n        0,\n        1.75,\n        1.875,\n        -2,\n        1.12,\n        1.35,\n        -1.12,\n        2,\n        1.35,\n        0,\n        2,\n        1.35,\n        -2,\n        1.12,\n        0.9,\n        -1.12,\n        2,\n        0.9,\n        0,\n        2,\n        0.9,\n        0.98,\n        1.75,\n        1.875,\n        1.75,\n        0.98,\n        1.875,\n        1.12,\n        2,\n        1.35,\n        2,\n        1.12,\n        1.35,\n        1.12,\n        2,\n        0.9,\n        2,\n        1.12,\n        0.9,\n        2,\n        0,\n        0.45,\n        2,\n        -1.12,\n        0.45,\n        1.12,\n        -2,\n        0.45,\n        0,\n        -2,\n        0.45,\n        1.5,\n        0,\n        0.225,\n        1.5,\n        -0.84,\n        0.225,\n        0.84,\n        -1.5,\n        0.225,\n        0,\n        -1.5,\n        0.225,\n        1.5,\n        0,\n        0.15,\n        1.5,\n        -0.84,\n        0.15,\n        0.84,\n        -1.5,\n        0.15,\n        0,\n        -1.5,\n        0.15,\n        -1.12,\n        -2,\n        0.45,\n        -2,\n        -1.12,\n        0.45,\n        -2,\n        0,\n        0.45,\n        -0.84,\n        -1.5,\n        0.225,\n        -1.5,\n        -0.84,\n        0.225,\n        -1.5,\n        0,\n        0.225,\n        -0.84,\n        -1.5,\n        0.15,\n        -1.5,\n        -0.84,\n        0.15,\n        -1.5,\n        0,\n        0.15,\n        -2,\n        1.12,\n        0.45,\n        -1.12,\n        2,\n        0.45,\n        0,\n        2,\n        0.45,\n        -1.5,\n        0.84,\n        0.225,\n        -0.84,\n        1.5,\n        0.225,\n        0,\n        1.5,\n        0.225,\n        -1.5,\n        0.84,\n        0.15,\n        -0.84,\n        1.5,\n        0.15,\n        0,\n        1.5,\n        0.15,\n        1.12,\n        2,\n        0.45,\n        2,\n        1.12,\n        0.45,\n        0.84,\n        1.5,\n        0.225,\n        1.5,\n        0.84,\n        0.225,\n        0.84,\n        1.5,\n        0.15,\n        1.5,\n        0.84,\n        0.15,\n        -1.6,\n        0,\n        2.025,\n        -1.6,\n        -0.3,\n        2.025,\n        -1.5,\n        -0.3,\n        2.25,\n        -1.5,\n        0,\n        2.25,\n        -2.3,\n        0,\n        2.025,\n        -2.3,\n        -0.3,\n        2.025,\n        -2.5,\n        -0.3,\n        2.25,\n        -2.5,\n        0,\n        2.25,\n        -2.7,\n        0,\n        2.025,\n        -2.7,\n        -0.3,\n        2.025,\n        -3,\n        -0.3,\n        2.25,\n        -3,\n        0,\n        2.25,\n        -2.7,\n        0,\n        1.8,\n        -2.7,\n        -0.3,\n        1.8,\n        -3,\n        -0.3,\n        1.8,\n        -3,\n        0,\n        1.8,\n        -1.5,\n        0.3,\n        2.25,\n        -1.6,\n        0.3,\n        2.025,\n        -2.5,\n        0.3,\n        2.25,\n        -2.3,\n        0.3,\n        2.025,\n        -3,\n        0.3,\n        2.25,\n        -2.7,\n        0.3,\n        2.025,\n        -3,\n        0.3,\n        1.8,\n        -2.7,\n        0.3,\n        1.8,\n        -2.7,\n        0,\n        1.575,\n        -2.7,\n        -0.3,\n        1.575,\n        -3,\n        -0.3,\n        1.35,\n        -3,\n        0,\n        1.35,\n        -2.5,\n        0,\n        1.125,\n        -2.5,\n        -0.3,\n        1.125,\n        -2.65,\n        -0.3,\n        0.9375,\n        -2.65,\n        0,\n        0.9375,\n        -2,\n        -0.3,\n        0.9,\n        -1.9,\n        -0.3,\n        0.6,\n        -1.9,\n        0,\n        0.6,\n        -3,\n        0.3,\n        1.35,\n        -2.7,\n        0.3,\n        1.575,\n        -2.65,\n        0.3,\n        0.9375,\n        -2.5,\n        0.3,\n        1.125,\n        -1.9,\n        0.3,\n        0.6,\n        -2,\n        0.3,\n        0.9,\n        1.7,\n        0,\n        1.425,\n        1.7,\n        -0.66,\n        1.425,\n        1.7,\n        -0.66,\n        0.6,\n        1.7,\n        0,\n        0.6,\n        2.6,\n        0,\n        1.425,\n        2.6,\n        -0.66,\n        1.425,\n        3.1,\n        -0.66,\n        0.825,\n        3.1,\n        0,\n        0.825,\n        2.3,\n        0,\n        2.1,\n        2.3,\n        -0.25,\n        2.1,\n        2.4,\n        -0.25,\n        2.025,\n        2.4,\n        0,\n        2.025,\n        2.7,\n        0,\n        2.4,\n        2.7,\n        -0.25,\n        2.4,\n        3.3,\n        -0.25,\n        2.4,\n        3.3,\n        0,\n        2.4,\n        1.7,\n        0.66,\n        0.6,\n        1.7,\n        0.66,\n        1.425,\n        3.1,\n        0.66,\n        0.825,\n        2.6,\n        0.66,\n        1.425,\n        2.4,\n        0.25,\n        2.025,\n        2.3,\n        0.25,\n        2.1,\n        3.3,\n        0.25,\n        2.4,\n        2.7,\n        0.25,\n        2.4,\n        2.8,\n        0,\n        2.475,\n        2.8,\n        -0.25,\n        2.475,\n        3.525,\n        -0.25,\n        2.49375,\n        3.525,\n        0,\n        2.49375,\n        2.9,\n        0,\n        2.475,\n        2.9,\n        -0.15,\n        2.475,\n        3.45,\n        -0.15,\n        2.5125,\n        3.45,\n        0,\n        2.5125,\n        2.8,\n        0,\n        2.4,\n        2.8,\n        -0.15,\n        2.4,\n        3.2,\n        -0.15,\n        2.4,\n        3.2,\n        0,\n        2.4,\n        3.525,\n        0.25,\n        2.49375,\n        2.8,\n        0.25,\n        2.475,\n        3.45,\n        0.15,\n        2.5125,\n        2.9,\n        0.15,\n        2.475,\n        3.2,\n        0.15,\n        2.4,\n        2.8,\n        0.15,\n        2.4,\n        0,\n        0,\n        3.15,\n        0.8,\n        0,\n        3.15,\n        0.8,\n        -0.45,\n        3.15,\n        0.45,\n        -0.8,\n        3.15,\n        0,\n        -0.8,\n        3.15,\n        0,\n        0,\n        2.85,\n        0.2,\n        0,\n        2.7,\n        0.2,\n        -0.112,\n        2.7,\n        0.112,\n        -0.2,\n        2.7,\n        0,\n        -0.2,\n        2.7,\n        -0.45,\n        -0.8,\n        3.15,\n        -0.8,\n        -0.45,\n        3.15,\n        -0.8,\n        0,\n        3.15,\n        -0.112,\n        -0.2,\n        2.7,\n        -0.2,\n        -0.112,\n        2.7,\n        -0.2,\n        0,\n        2.7,\n        -0.8,\n        0.45,\n        3.15,\n        -0.45,\n        0.8,\n        3.15,\n        0,\n        0.8,\n        3.15,\n        -0.2,\n        0.112,\n        2.7,\n        -0.112,\n        0.2,\n        2.7,\n        0,\n        0.2,\n        2.7,\n        0.45,\n        0.8,\n        3.15,\n        0.8,\n        0.45,\n        3.15,\n        0.112,\n        0.2,\n        2.7,\n        0.2,\n        0.112,\n        2.7,\n        0.4,\n        0,\n        2.55,\n        0.4,\n        -0.224,\n        2.55,\n        0.224,\n        -0.4,\n        2.55,\n        0,\n        -0.4,\n        2.55,\n        1.3,\n        0,\n        2.55,\n        1.3,\n        -0.728,\n        2.55,\n        0.728,\n        -1.3,\n        2.55,\n        0,\n        -1.3,\n        2.55,\n        1.3,\n        0,\n        2.4,\n        1.3,\n        -0.728,\n        2.4,\n        0.728,\n        -1.3,\n        2.4,\n        0,\n        -1.3,\n        2.4,\n        -0.224,\n        -0.4,\n        2.55,\n        -0.4,\n        -0.224,\n        2.55,\n        -0.4,\n        0,\n        2.55,\n        -0.728,\n        -1.3,\n        2.55,\n        -1.3,\n        -0.728,\n        2.55,\n        -1.3,\n        0,\n        2.55,\n        -0.728,\n        -1.3,\n        2.4,\n        -1.3,\n        -0.728,\n        2.4,\n        -1.3,\n        0,\n        2.4,\n        -0.4,\n        0.224,\n        2.55,\n        -0.224,\n        0.4,\n        2.55,\n        0,\n        0.4,\n        2.55,\n        -1.3,\n        0.728,\n        2.55,\n        -0.728,\n        1.3,\n        2.55,\n        0,\n        1.3,\n        2.55,\n        -1.3,\n        0.728,\n        2.4,\n        -0.728,\n        1.3,\n        2.4,\n        0,\n        1.3,\n        2.4,\n        0.224,\n        0.4,\n        2.55,\n        0.4,\n        0.224,\n        2.55,\n        0.728,\n        1.3,\n        2.55,\n        1.3,\n        0.728,\n        2.55,\n        0.728,\n        1.3,\n        2.4,\n        1.3,\n        0.728,\n        2.4,\n        0,\n        0,\n        0,\n        1.425,\n        0,\n        0,\n        1.425,\n        0.798,\n        0,\n        0.798,\n        1.425,\n        0,\n        0,\n        1.425,\n        0,\n        1.5,\n        0,\n        0.075,\n        1.5,\n        0.84,\n        0.075,\n        0.84,\n        1.5,\n        0.075,\n        0,\n        1.5,\n        0.075,\n        -0.798,\n        1.425,\n        0,\n        -1.425,\n        0.798,\n        0,\n        -1.425,\n        0,\n        0,\n        -0.84,\n        1.5,\n        0.075,\n        -1.5,\n        0.84,\n        0.075,\n        -1.5,\n        0,\n        0.075,\n        -1.425,\n        -0.798,\n        0,\n        -0.798,\n        -1.425,\n        0,\n        0,\n        -1.425,\n        0,\n        -1.5,\n        -0.84,\n        0.075,\n        -0.84,\n        -1.5,\n        0.075,\n        0,\n        -1.5,\n        0.075,\n        0.798,\n        -1.425,\n        0,\n        1.425,\n        -0.798,\n        0,\n        0.84,\n        -1.5,\n        0.075,\n        1.5,\n        -0.84,\n        0.075\n    ];\n    THREE.Geometry.call(this);\n    this.type = \"TeapotGeometry\";\n    this.parameters = {\n        size: size,\n        segments: segments,\n        bottom: bottom,\n        lid: lid,\n        body: body,\n        fitLid: fitLid,\n        blinn: blinn\n    };\n    size = size || 50;\n    // number of segments per patch\n    segments = segments !== undefined ? Math.max(2, Math.floor(segments) || 10) : 10;\n    // which parts should be visible\n    bottom = bottom === undefined ? true : bottom;\n    lid = lid === undefined ? true : lid;\n    body = body === undefined ? true : body;\n    // Should the lid be snug? It's not traditional, so off by default\n    fitLid = fitLid === undefined ? false : fitLid;\n    // Jim Blinn scaled the teapot down in size by about 1.3 for\n    // some rendering tests. He liked the new proportions that he kept\n    // the data in this form. The model was distributed with these new\n    // proportions and became the norm. Trivia: comparing images of the\n    // real teapot and the computer model, the ratio for the bowl of the\n    // real teapot is more like 1.25, but since 1.3 is the traditional\n    // value given, we use it here.\n    var blinnScale = 1.3;\n    blinn = blinn === undefined ? true : blinn;\n    // scale the size to be the real scaling factor\n    var maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    var maxHeight2 = maxHeight / 2;\n    var trueSize = size / maxHeight2;\n    // Number of elements depends on what is needed. Subtract degenerate\n    // triangles at tip of bottom and lid out in advance.\n    var numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    var numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    var i;\n    var normals = [];\n    var uvs = [];\n    for(i = 0; i < numVertices; i++){\n        this.vertices.push(new THREE.Vector3());\n        normals.push(new THREE.Vector3());\n        uvs.push(new THREE.Vector2());\n    }\n    // Bezier form\n    var ms = new THREE.Matrix4();\n    ms.set(-1, 3.0, -3, 1.0, 3.0, -6, 3.0, 0.0, -3, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\n    var g = [];\n    var i, r, c;\n    var sp = [];\n    var tp = [];\n    var dsp = [];\n    var dtp = [];\n    // M * G * M matrix, sort of see\n    // http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n    var mgm = [];\n    var vert = [];\n    var sdir = [];\n    var tdir = [];\n    var norm = new THREE.Vector3();\n    var tcoord;\n    var sstep, tstep;\n    var vertPerRow, eps;\n    var s, t, sval, tval, p, dsval, dtval;\n    var normOut = new THREE.Vector3();\n    var v1, v2, v3, v4;\n    var gmx = new THREE.Matrix4();\n    var tmtx = new THREE.Matrix4();\n    var vsp = new THREE.Vector4();\n    var vtp = new THREE.Vector4();\n    var vdsp = new THREE.Vector4();\n    var vdtp = new THREE.Vector4();\n    var vsdir = new THREE.Vector3();\n    var vtdir = new THREE.Vector3();\n    var mst = ms.clone();\n    mst.transpose();\n    // internal function: test if triangle has any matching vertices;\n    // if so, don't save triangle, since it won't display anything.\n    var notDegenerate = function(vtx1, vtx2, vtx3) {\n        // if any vertex matches, return false\n        if (vtx1.equals(vtx2)) return false;\n        if (vtx1.equals(vtx3)) return false;\n        if (vtx2.equals(vtx3)) return false;\n        return true;\n    };\n    for(i = 0; i < 3; i++)mgm[i] = new THREE.Matrix4();\n    var minPatches = body ? 0 : 20;\n    var maxPatches = bottom ? 32 : 28;\n    vertPerRow = segments + 1;\n    eps = 0.0000001;\n    var surfCount = 0;\n    var vertCount = 0;\n    var normCount = 0;\n    var uvCount = 0;\n    for(var surf = minPatches; surf < maxPatches; surf++)// lid is in the middle of the data, patches 20-27,\n    // so ignore it for this part of the loop if the lid is not desired\n    if (lid || surf < 20 || surf >= 28) {\n        // get M * G * M matrix for x,y,z\n        for(i = 0; i < 3; i++){\n            // get control patches\n            for(r = 0; r < 4; r++)for(c = 0; c < 4; c++){\n                // transposed\n                g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i];\n                // is the lid to be made larger, and is this a point on the lid\n                // that is X or Y?\n                if (fitLid && surf >= 20 && surf < 28 && i !== 2) // increase XY size by 7.7%, found empirically. I don't\n                // increase Z so that the teapot will continue to fit in the\n                // space -1 to 1 for Y (Y is up for the final model).\n                g[c * 4 + r] *= 1.077;\n                // Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n                // data we now use. The original teapot is taller. Fix it:\n                if (!blinn && i === 2) g[c * 4 + r] *= blinnScale;\n            }\n            gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n            tmtx.multiplyMatrices(gmx, ms);\n            mgm[i].multiplyMatrices(mst, tmtx);\n        }\n        // step along, get points, and output\n        for(sstep = 0; sstep <= segments; sstep++){\n            s = sstep / segments;\n            for(tstep = 0; tstep <= segments; tstep++){\n                t = tstep / segments;\n                // point from basis\n                // get power vectors and their derivatives\n                for(p = 4, sval = tval = 1.0; p--;){\n                    sp[p] = sval;\n                    tp[p] = tval;\n                    sval *= s;\n                    tval *= t;\n                    if (p === 3) {\n                        dsp[p] = dtp[p] = 0.0;\n                        dsval = dtval = 1.0;\n                    } else {\n                        dsp[p] = dsval * (3 - p);\n                        dtp[p] = dtval * (3 - p);\n                        dsval *= s;\n                        dtval *= t;\n                    }\n                }\n                vsp.set(sp[0], sp[1], sp[2], sp[3]);\n                vtp.set(tp[0], tp[1], tp[2], tp[3]);\n                vdsp.set(dsp[0], dsp[1], dsp[2], dsp[3]);\n                vdtp.set(dtp[0], dtp[1], dtp[2], dtp[3]);\n                // do for x,y,z\n                for(i = 0; i < 3; i++){\n                    // multiply power vectors times matrix to get value\n                    tcoord = vsp.clone();\n                    tcoord.applyMatrix4(mgm[i]);\n                    vert[i] = tcoord.dot(vtp);\n                    // get s and t tangent vectors\n                    tcoord = vdsp.clone();\n                    tcoord.applyMatrix4(mgm[i]);\n                    sdir[i] = tcoord.dot(vtp);\n                    tcoord = vsp.clone();\n                    tcoord.applyMatrix4(mgm[i]);\n                    tdir[i] = tcoord.dot(vdtp);\n                }\n                // find normal\n                vsdir.set(sdir[0], sdir[1], sdir[2], sdir[3]);\n                vtdir.set(tdir[0], tdir[1], tdir[2], tdir[3]);\n                norm.crossVectors(vtdir, vsdir);\n                norm.normalize();\n                // if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n                if (vert[0] === 0 && vert[1] === 0) // if above the middle of the teapot, normal points up, else down\n                normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n                else // standard output: rotate on X axis\n                normOut.set(norm.x, norm.z, -norm.y);\n                // three.js uses Y up, the code makes Z up, so time for a trick:\n                // rotate on X axis, and offset down on Y axis so object ranges from -1 to 1 in Y\n                this.vertices[vertCount++].set(trueSize * vert[0], trueSize * (vert[2] - maxHeight2), -trueSize * vert[1]);\n                normals[normCount++].set(normOut.x, normOut.y, normOut.z);\n                uvs[uvCount++].set(1 - t, 1 - s);\n            }\n        }\n        // save the faces\n        for(sstep = 0; sstep < segments; sstep++)for(tstep = 0; tstep < segments; tstep++){\n            v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            v2 = v1 + 1;\n            v3 = v2 + vertPerRow;\n            v4 = v1 + vertPerRow;\n            // Normals and UVs cannot be shared. Without clone(), you can see the consequences\n            // of sharing if you call geometry.applyMatrix( matrix ).\n            if (notDegenerate(this.vertices[v1], this.vertices[v2], this.vertices[v3])) {\n                this.faces.push(new THREE.Face3(v1, v2, v3, [\n                    normals[v1],\n                    normals[v2],\n                    normals[v3]\n                ]));\n                this.faceVertexUvs[0].push([\n                    uvs[v1],\n                    uvs[v2],\n                    uvs[v3]\n                ]);\n            }\n            if (notDegenerate(this.vertices[v1], this.vertices[v3], this.vertices[v4])) {\n                this.faces.push(new THREE.Face3(v1, v3, v4, [\n                    normals[v1],\n                    normals[v3],\n                    normals[v4]\n                ]));\n                this.faceVertexUvs[0].push([\n                    uvs[v1],\n                    uvs[v3],\n                    uvs[v4]\n                ]);\n            }\n        }\n        // increment only if a surface was used\n        surfCount++;\n    }\n    this.computeCentroids();\n    this.computeFaceNormals();\n    this.mergeVertices();\n};\nTHREE.TeapotGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.TeapotGeometry.prototype.constructor = THREE.TeapotGeometry;\nTHREE.TeapotGeometry.prototype.clone = function() {\n    var geometry = new THREE.TeapotGeometry(this.parameters.size, this.parameters.segments, this.parameters.bottom, this.parameters.lid, this.parameters.body, this.parameters.fitLid, this.parameters.blinn);\n    return geometry;\n};\n\n//# sourceMappingURL=index.db801c86.js.map\n","/**\n * @author Eric Haines / http://erichaines.com/\n *\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * THREE.TeapotGeometry = function ( size, segments, bottom, lid, body, fitLid, blinn )\n *\n * defaults: size = 50, segments = 10, bottom = true, lid = true, body = true,\n *   fitLid = false, blinn = true\n *\n * size is a relative scale: I've scaled the teapot to fit vertically between -1 and 1.\n * Think of it as a \"radius\".\n * segments - number of line segments to subdivide each patch edge;\n *   1 is possible but gives degenerates, so two is the real minimum.\n * bottom - boolean, if true (default) then the bottom patches are added. Some consider\n *   adding the bottom heresy, so set this to \"false\" to adhere to the One True Way.\n * lid - to remove the lid and look inside, set to true.\n * body - to remove the body and leave the lid, set this and \"bottom\" to false.\n * fitLid - the lid is a tad small in the original. This stretches it a bit so you can't\n *   see the teapot's insides through the gap.\n * blinn - Jim Blinn scaled the original data vertically by dividing by about 1.3 to look\n *   nicer. If you want to see the original teapot, similar to the real-world model, set\n *   this to false. True by default.\n *   See http://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg for the original\n *   real-world teapot (from http://en.wikipedia.org/wiki/Utah_teapot).\n *\n * Note that the bottom (the last four patches) is not flat - blame Frank Crow, not me.\n *\n * The teapot should normally be rendered as a double sided object, since for some \n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output.\n *   Total triangles = 32*2*n*n - 8*n    [degenerates at the top and bottom cusps are deleted]\n *\n *   size_factor   # triangles\n *       1          56\n *       2         240\n *       3         552\n *       4         992\n *\n *      10        6320\n *      20       25440\n *      30       57360\n *\n * Code converted from my ancient SPD software, http://tog.acm.org/resources/SPD/\n * Created for the Udacity course \"Interactive Rendering\", http://bit.ly/ericity\n * Lesson: https://www.udacity.com/course/viewer#!/c-cs291/l-68866048/m-106482448\n * YouTube video on teapot history: https://www.youtube.com/watch?v=DxMfblPzFNc\n *\n * See https://en.wikipedia.org/wiki/Utah_teapot for the history of the teapot\n *\n */\n/*global THREE */\n\nTHREE.TeapotGeometry = function ( size, segments, bottom, lid, body, fitLid, blinn ) {\n\n\t\"use strict\";\n\n\t// 32 * 4 * 4 Bezier spline patches\n\tvar teapotPatches = [\n/*rim*/\n0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n3,16,17,18,7,19,20,21,11,22,23,24,15,25,26,27,\n18,28,29,30,21,31,32,33,24,34,35,36,27,37,38,39,\n30,40,41,0,33,42,43,4,36,44,45,8,39,46,47,12,\n/*body*/\n12,13,14,15,48,49,50,51,52,53,54,55,56,57,58,59,\n15,25,26,27,51,60,61,62,55,63,64,65,59,66,67,68,\n27,37,38,39,62,69,70,71,65,72,73,74,68,75,76,77,\n39,46,47,12,71,78,79,48,74,80,81,52,77,82,83,56,\n56,57,58,59,84,85,86,87,88,89,90,91,92,93,94,95,\n59,66,67,68,87,96,97,98,91,99,100,101,95,102,103,104,\n68,75,76,77,98,105,106,107,101,108,109,110,104,111,112,113,\n77,82,83,56,107,114,115,84,110,116,117,88,113,118,119,92,\n/*handle*/\n120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,\n123,136,137,120,127,138,139,124,131,140,141,128,135,142,143,132,\n132,133,134,135,144,145,146,147,148,149,150,151,68,152,153,154,\n135,142,143,132,147,155,156,144,151,157,158,148,154,159,160,68,\n/*spout*/\n161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,\n164,177,178,161,168,179,180,165,172,181,182,169,176,183,184,173,\n173,174,175,176,185,186,187,188,189,190,191,192,193,194,195,196,\n176,183,184,173,188,197,198,185,192,199,200,189,196,201,202,193,\n/*lid*/\n203,203,203,203,204,205,206,207,208,208,208,208,209,210,211,212,\n203,203,203,203,207,213,214,215,208,208,208,208,212,216,217,218,\n203,203,203,203,215,219,220,221,208,208,208,208,218,222,223,224,\n203,203,203,203,221,225,226,204,208,208,208,208,224,227,228,209,\n209,210,211,212,229,230,231,232,233,234,235,236,237,238,239,240,\n212,216,217,218,232,241,242,243,236,244,245,246,240,247,248,249,\n218,222,223,224,243,250,251,252,246,253,254,255,249,256,257,258,\n224,227,228,209,252,259,260,229,255,261,262,233,258,263,264,237,\n/*bottom*/\n265,265,265,265,266,267,268,269,270,271,272,273,92,119,118,113,\n265,265,265,265,269,274,275,276,273,277,278,279,113,112,111,104,\n265,265,265,265,276,280,281,282,279,283,284,285,104,103,102,95,\n265,265,265,265,282,286,287,266,285,288,289,270,95,94,93,92\n\t] ;\n\n\tvar teapotVertices = [\n1.4,0,2.4,\n1.4,-0.784,2.4,\n0.784,-1.4,2.4,\n0,-1.4,2.4,\n1.3375,0,2.53125,\n1.3375,-0.749,2.53125,\n0.749,-1.3375,2.53125,\n0,-1.3375,2.53125,\n1.4375,0,2.53125,\n1.4375,-0.805,2.53125,\n0.805,-1.4375,2.53125,\n0,-1.4375,2.53125,\n1.5,0,2.4,\n1.5,-0.84,2.4,\n0.84,-1.5,2.4,\n0,-1.5,2.4,\n-0.784,-1.4,2.4,\n-1.4,-0.784,2.4,\n-1.4,0,2.4,\n-0.749,-1.3375,2.53125,\n-1.3375,-0.749,2.53125,\n-1.3375,0,2.53125,\n-0.805,-1.4375,2.53125,\n-1.4375,-0.805,2.53125,\n-1.4375,0,2.53125,\n-0.84,-1.5,2.4,\n-1.5,-0.84,2.4,\n-1.5,0,2.4,\n-1.4,0.784,2.4,\n-0.784,1.4,2.4,\n0,1.4,2.4,\n-1.3375,0.749,2.53125,\n-0.749,1.3375,2.53125,\n0,1.3375,2.53125,\n-1.4375,0.805,2.53125,\n-0.805,1.4375,2.53125,\n0,1.4375,2.53125,\n-1.5,0.84,2.4,\n-0.84,1.5,2.4,\n0,1.5,2.4,\n0.784,1.4,2.4,\n1.4,0.784,2.4,\n0.749,1.3375,2.53125,\n1.3375,0.749,2.53125,\n0.805,1.4375,2.53125,\n1.4375,0.805,2.53125,\n0.84,1.5,2.4,\n1.5,0.84,2.4,\n1.75,0,1.875,\n1.75,-0.98,1.875,\n0.98,-1.75,1.875,\n0,-1.75,1.875,\n2,0,1.35,\n2,-1.12,1.35,\n1.12,-2,1.35,\n0,-2,1.35,\n2,0,0.9,\n2,-1.12,0.9,\n1.12,-2,0.9,\n0,-2,0.9,\n-0.98,-1.75,1.875,\n-1.75,-0.98,1.875,\n-1.75,0,1.875,\n-1.12,-2,1.35,\n-2,-1.12,1.35,\n-2,0,1.35,\n-1.12,-2,0.9,\n-2,-1.12,0.9,\n-2,0,0.9,\n-1.75,0.98,1.875,\n-0.98,1.75,1.875,\n0,1.75,1.875,\n-2,1.12,1.35,\n-1.12,2,1.35,\n0,2,1.35,\n-2,1.12,0.9,\n-1.12,2,0.9,\n0,2,0.9,\n0.98,1.75,1.875,\n1.75,0.98,1.875,\n1.12,2,1.35,\n2,1.12,1.35,\n1.12,2,0.9,\n2,1.12,0.9,\n2,0,0.45,\n2,-1.12,0.45,\n1.12,-2,0.45,\n0,-2,0.45,\n1.5,0,0.225,\n1.5,-0.84,0.225,\n0.84,-1.5,0.225,\n0,-1.5,0.225,\n1.5,0,0.15,\n1.5,-0.84,0.15,\n0.84,-1.5,0.15,\n0,-1.5,0.15,\n-1.12,-2,0.45,\n-2,-1.12,0.45,\n-2,0,0.45,\n-0.84,-1.5,0.225,\n-1.5,-0.84,0.225,\n-1.5,0,0.225,\n-0.84,-1.5,0.15,\n-1.5,-0.84,0.15,\n-1.5,0,0.15,\n-2,1.12,0.45,\n-1.12,2,0.45,\n0,2,0.45,\n-1.5,0.84,0.225,\n-0.84,1.5,0.225,\n0,1.5,0.225,\n-1.5,0.84,0.15,\n-0.84,1.5,0.15,\n0,1.5,0.15,\n1.12,2,0.45,\n2,1.12,0.45,\n0.84,1.5,0.225,\n1.5,0.84,0.225,\n0.84,1.5,0.15,\n1.5,0.84,0.15,\n-1.6,0,2.025,\n-1.6,-0.3,2.025,\n-1.5,-0.3,2.25,\n-1.5,0,2.25,\n-2.3,0,2.025,\n-2.3,-0.3,2.025,\n-2.5,-0.3,2.25,\n-2.5,0,2.25,\n-2.7,0,2.025,\n-2.7,-0.3,2.025,\n-3,-0.3,2.25,\n-3,0,2.25,\n-2.7,0,1.8,\n-2.7,-0.3,1.8,\n-3,-0.3,1.8,\n-3,0,1.8,\n-1.5,0.3,2.25,\n-1.6,0.3,2.025,\n-2.5,0.3,2.25,\n-2.3,0.3,2.025,\n-3,0.3,2.25,\n-2.7,0.3,2.025,\n-3,0.3,1.8,\n-2.7,0.3,1.8,\n-2.7,0,1.575,\n-2.7,-0.3,1.575,\n-3,-0.3,1.35,\n-3,0,1.35,\n-2.5,0,1.125,\n-2.5,-0.3,1.125,\n-2.65,-0.3,0.9375,\n-2.65,0,0.9375,\n-2,-0.3,0.9,\n-1.9,-0.3,0.6,\n-1.9,0,0.6,\n-3,0.3,1.35,\n-2.7,0.3,1.575,\n-2.65,0.3,0.9375,\n-2.5,0.3,1.125,\n-1.9,0.3,0.6,\n-2,0.3,0.9,\n1.7,0,1.425,\n1.7,-0.66,1.425,\n1.7,-0.66,0.6,\n1.7,0,0.6,\n2.6,0,1.425,\n2.6,-0.66,1.425,\n3.1,-0.66,0.825,\n3.1,0,0.825,\n2.3,0,2.1,\n2.3,-0.25,2.1,\n2.4,-0.25,2.025,\n2.4,0,2.025,\n2.7,0,2.4,\n2.7,-0.25,2.4,\n3.3,-0.25,2.4,\n3.3,0,2.4,\n1.7,0.66,0.6,\n1.7,0.66,1.425,\n3.1,0.66,0.825,\n2.6,0.66,1.425,\n2.4,0.25,2.025,\n2.3,0.25,2.1,\n3.3,0.25,2.4,\n2.7,0.25,2.4,\n2.8,0,2.475,\n2.8,-0.25,2.475,\n3.525,-0.25,2.49375,\n3.525,0,2.49375,\n2.9,0,2.475,\n2.9,-0.15,2.475,\n3.45,-0.15,2.5125,\n3.45,0,2.5125,\n2.8,0,2.4,\n2.8,-0.15,2.4,\n3.2,-0.15,2.4,\n3.2,0,2.4,\n3.525,0.25,2.49375,\n2.8,0.25,2.475,\n3.45,0.15,2.5125,\n2.9,0.15,2.475,\n3.2,0.15,2.4,\n2.8,0.15,2.4,\n0,0,3.15,\n0.8,0,3.15,\n0.8,-0.45,3.15,\n0.45,-0.8,3.15,\n0,-0.8,3.15,\n0,0,2.85,\n0.2,0,2.7,\n0.2,-0.112,2.7,\n0.112,-0.2,2.7,\n0,-0.2,2.7,\n-0.45,-0.8,3.15,\n-0.8,-0.45,3.15,\n-0.8,0,3.15,\n-0.112,-0.2,2.7,\n-0.2,-0.112,2.7,\n-0.2,0,2.7,\n-0.8,0.45,3.15,\n-0.45,0.8,3.15,\n0,0.8,3.15,\n-0.2,0.112,2.7,\n-0.112,0.2,2.7,\n0,0.2,2.7,\n0.45,0.8,3.15,\n0.8,0.45,3.15,\n0.112,0.2,2.7,\n0.2,0.112,2.7,\n0.4,0,2.55,\n0.4,-0.224,2.55,\n0.224,-0.4,2.55,\n0,-0.4,2.55,\n1.3,0,2.55,\n1.3,-0.728,2.55,\n0.728,-1.3,2.55,\n0,-1.3,2.55,\n1.3,0,2.4,\n1.3,-0.728,2.4,\n0.728,-1.3,2.4,\n0,-1.3,2.4,\n-0.224,-0.4,2.55,\n-0.4,-0.224,2.55,\n-0.4,0,2.55,\n-0.728,-1.3,2.55,\n-1.3,-0.728,2.55,\n-1.3,0,2.55,\n-0.728,-1.3,2.4,\n-1.3,-0.728,2.4,\n-1.3,0,2.4,\n-0.4,0.224,2.55,\n-0.224,0.4,2.55,\n0,0.4,2.55,\n-1.3,0.728,2.55,\n-0.728,1.3,2.55,\n0,1.3,2.55,\n-1.3,0.728,2.4,\n-0.728,1.3,2.4,\n0,1.3,2.4,\n0.224,0.4,2.55,\n0.4,0.224,2.55,\n0.728,1.3,2.55,\n1.3,0.728,2.55,\n0.728,1.3,2.4,\n1.3,0.728,2.4,\n0,0,0,\n1.425,0,0,\n1.425,0.798,0,\n0.798,1.425,0,\n0,1.425,0,\n1.5,0,0.075,\n1.5,0.84,0.075,\n0.84,1.5,0.075,\n0,1.5,0.075,\n-0.798,1.425,0,\n-1.425,0.798,0,\n-1.425,0,0,\n-0.84,1.5,0.075,\n-1.5,0.84,0.075,\n-1.5,0,0.075,\n-1.425,-0.798,0,\n-0.798,-1.425,0,\n0,-1.425,0,\n-1.5,-0.84,0.075,\n-0.84,-1.5,0.075,\n0,-1.5,0.075,\n0.798,-1.425,0,\n1.425,-0.798,0,\n0.84,-1.5,0.075,\n1.5,-0.84,0.075\n\t] ;\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TeapotGeometry';\n\n\tthis.parameters = {\n\t\tsize: size,\n\t\tsegments: segments,\n\t\tbottom: bottom,\n\t\tlid: lid,\n\t\tbody: body,\n\t\tfitLid: fitLid,\n\t\tblinn: blinn\n\t};\n\n\tsize = size || 50;\n\n\t// number of segments per patch\n\tsegments = segments !== undefined ? Math.max( 2, Math.floor( segments ) || 10 ) : 10;\n\n\t// which parts should be visible\n\tbottom = bottom === undefined ? true : bottom;\n\tlid = lid === undefined ? true : lid;\n\tbody = body === undefined ? true : body;\n\n\t// Should the lid be snug? It's not traditional, so off by default\n\tfitLid = fitLid === undefined ? false : fitLid;\n\n\t// Jim Blinn scaled the teapot down in size by about 1.3 for\n\t// some rendering tests. He liked the new proportions that he kept\n\t// the data in this form. The model was distributed with these new\n\t// proportions and became the norm. Trivia: comparing images of the\n\t// real teapot and the computer model, the ratio for the bowl of the\n\t// real teapot is more like 1.25, but since 1.3 is the traditional\n\t// value given, we use it here.\n\tvar blinnScale = 1.3;\n\tblinn = blinn === undefined ? true : blinn;\n\n\t// scale the size to be the real scaling factor\n\tvar maxHeight = 3.15 * ( blinn ? 1 : blinnScale );\n\n\tvar maxHeight2 = maxHeight / 2;\n\tvar trueSize = size / maxHeight2;\n\n\t// Number of elements depends on what is needed. Subtract degenerate\n\t// triangles at tip of bottom and lid out in advance.\n\tvar numTriangles = bottom ? ( 8 * segments - 4 ) * segments : 0;\n\tnumTriangles += lid ? ( 16 * segments - 4 ) * segments : 0;\n\tnumTriangles += body ? 40 * segments * segments : 0;\n\n\tvar numVertices = bottom ? 4 : 0;\n\tnumVertices += lid ? 8 : 0;\n\tnumVertices += body ? 20 : 0;\n\tnumVertices *= ( segments + 1 ) * ( segments + 1 );\n\n\tvar i;\n\tvar normals = [];\n\tvar uvs = [];\n\tfor ( i = 0; i < numVertices; i++ ) {\n\t\tthis.vertices.push( new THREE.Vector3() );\n\t\tnormals.push( new THREE.Vector3() );\n\t\tuvs.push( new THREE.Vector2() );\n\t}\n\n\t// Bezier form\n\tvar ms = new THREE.Matrix4();\n\tms.set( -1.0,  3.0, -3.0,  1.0,\n\t\t\t 3.0, -6.0,  3.0,  0.0,\n\t\t\t-3.0,  3.0,  0.0,  0.0,\n\t\t\t 1.0,  0.0,  0.0,  0.0 ) ;\n\n\tvar g = [];\n\tvar i, r, c;\n\n\tvar sp = [];\n\tvar tp = [];\n\tvar dsp = [];\n\tvar dtp = [];\n\n\t// M * G * M matrix, sort of see\n\t// http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n\tvar mgm = [];\n\n\tvar vert = [];\n\tvar sdir = [];\n\tvar tdir = [];\n\n\tvar norm = new THREE.Vector3();\n\n\tvar tcoord;\n\n\tvar sstep, tstep;\n\tvar vertPerRow, eps;\n\n\tvar s, t, sval, tval, p, dsval, dtval;\n\n\tvar normOut = new THREE.Vector3();\n\tvar v1, v2, v3, v4;\n\n\tvar gmx = new THREE.Matrix4();\n\tvar tmtx = new THREE.Matrix4();\n\n\tvar vsp = new THREE.Vector4();\n\tvar vtp = new THREE.Vector4();\n\tvar vdsp = new THREE.Vector4();\n\tvar vdtp = new THREE.Vector4();\n\n\tvar vsdir = new THREE.Vector3();\n\tvar vtdir = new THREE.Vector3();\n\n\tvar mst = ms.clone();\n\tmst.transpose();\n\n\t// internal function: test if triangle has any matching vertices;\n\t// if so, don't save triangle, since it won't display anything.\n\tvar notDegenerate = function ( vtx1, vtx2, vtx3 ) {\n\n\t\t// if any vertex matches, return false\n\t\tif ( vtx1.equals( vtx2 ) ) { return false; }\n\t\tif ( vtx1.equals( vtx3 ) ) { return false; }\n\t\tif ( vtx2.equals( vtx3 ) ) { return false; }\n\t\treturn true;\n\n\t};\n\n\n\tfor ( i = 0; i < 3; i ++ )\n\t{\n\n\t\tmgm[ i ] = new THREE.Matrix4();\n\n\t}\n\n\tvar minPatches = body ? 0 : 20;\n\tvar maxPatches = bottom ? 32 : 28;\n\n\tvertPerRow = segments + 1;\n\n\teps = 0.0000001;\n\n\tvar surfCount = 0;\n\tvar vertCount = 0;\n\tvar normCount = 0;\n\tvar uvCount = 0;\n\n\tfor ( var surf = minPatches ; surf < maxPatches ; surf ++ ) {\n\n\t\t// lid is in the middle of the data, patches 20-27,\n\t\t// so ignore it for this part of the loop if the lid is not desired\n\t\tif ( lid || ( surf < 20 || surf >= 28 ) ) {\n\n\t\t\t// get M * G * M matrix for x,y,z\n\t\t\tfor ( i = 0 ; i < 3 ; i ++ ) {\n\n\t\t\t\t// get control patches\n\t\t\t\tfor ( r = 0 ; r < 4 ; r ++ ) {\n\n\t\t\t\t\tfor ( c = 0 ; c < 4 ; c ++ ) {\n\n\t\t\t\t\t\t// transposed\n\t\t\t\t\t\tg[ c * 4 + r ] = teapotVertices[ teapotPatches[ surf * 16 + r * 4 + c ] * 3 + i ] ;\n\n\t\t\t\t\t\t// is the lid to be made larger, and is this a point on the lid\n\t\t\t\t\t\t// that is X or Y?\n\t\t\t\t\t\tif ( fitLid && ( surf >= 20 && surf < 28 ) && ( i !== 2 ) ) {\n\n\t\t\t\t\t\t\t// increase XY size by 7.7%, found empirically. I don't\n\t\t\t\t\t\t\t// increase Z so that the teapot will continue to fit in the\n\t\t\t\t\t\t\t// space -1 to 1 for Y (Y is up for the final model).\n\t\t\t\t\t\t\tg[ c * 4 + r ] *= 1.077;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n\t\t\t\t\t\t// data we now use. The original teapot is taller. Fix it:\n\t\t\t\t\t\tif ( ! blinn && ( i === 2 ) ) {\n\n\t\t\t\t\t\t\tg[ c * 4 + r ] *= blinnScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgmx.set( g[ 0 ], g[ 1 ], g[ 2 ], g[ 3 ], g[ 4 ], g[ 5 ], g[ 6 ], g[ 7 ], g[ 8 ], g[ 9 ], g[ 10 ], g[ 11 ], g[ 12 ], g[ 13 ], g[ 14 ], g[ 15 ] );\n\n\t\t\t\ttmtx.multiplyMatrices( gmx, ms );\n\t\t\t\tmgm[ i ].multiplyMatrices( mst, tmtx );\n\n\t\t\t}\n\n\t\t\t// step along, get points, and output\n\t\t\tfor ( sstep = 0 ; sstep <= segments ; sstep ++ ) {\n\n\t\t\t\ts = sstep / segments;\n\n\t\t\t\tfor ( tstep = 0 ; tstep <= segments ; tstep ++ ) {\n\n\t\t\t\t\tt = tstep / segments;\n\n\t\t\t\t\t// point from basis\n\t\t\t\t\t// get power vectors and their derivatives\n\t\t\t\t\tfor ( p = 4, sval = tval = 1.0 ; p -- ; ) {\n\n\t\t\t\t\t\tsp[ p ] = sval ;\n\t\t\t\t\t\ttp[ p ] = tval ;\n\t\t\t\t\t\tsval *= s ;\n\t\t\t\t\t\ttval *= t ;\n\n\t\t\t\t\t\tif ( p === 3 ) {\n\n\t\t\t\t\t\t\tdsp[ p ] = dtp[ p ] = 0.0 ;\n\t\t\t\t\t\t\tdsval = dtval = 1.0 ;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdsp[ p ] = dsval * ( 3 - p ) ;\n\t\t\t\t\t\t\tdtp[ p ] = dtval * ( 3 - p ) ;\n\t\t\t\t\t\t\tdsval *= s ;\n\t\t\t\t\t\t\tdtval *= t ;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvsp.set( sp[0], sp[1], sp[2], sp[3] );\n\t\t\t\t\tvtp.set( tp[0], tp[1], tp[2], tp[3] );\n\t\t\t\t\tvdsp.set( dsp[0], dsp[1], dsp[2], dsp[3] );\n\t\t\t\t\tvdtp.set( dtp[0], dtp[1], dtp[2], dtp[3] );\n\n\t\t\t\t\t// do for x,y,z\n\t\t\t\t\tfor ( i = 0 ; i < 3 ; i ++ ) {\n\n\t\t\t\t\t\t// multiply power vectors times matrix to get value\n\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\tvert[ i ] = tcoord.dot( vtp );\n\n\t\t\t\t\t\t// get s and t tangent vectors\n\t\t\t\t\t\ttcoord = vdsp.clone();\n\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\tsdir[ i ] = tcoord.dot( vtp ) ;\n\n\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\ttdir[ i ] = tcoord.dot( vdtp ) ;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// find normal\n\t\t\t\t\tvsdir.set( sdir[0], sdir[1], sdir[2], sdir[3] );\n\t\t\t\t\tvtdir.set( tdir[0], tdir[1], tdir[2], tdir[3] );\n\t\t\t\t\tnorm.crossVectors( vtdir, vsdir );\n\t\t\t\t\tnorm.normalize();\n\n\t\t\t\t\t// if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n\t\t\t\t\tif ( vert[ 0 ] === 0 && vert[ 1 ] === 0 )\n\t\t\t\t\t{\n\n\t\t\t\t\t\t// if above the middle of the teapot, normal points up, else down\n\t\t\t\t\t\tnormOut.set( 0, vert[ 2 ] > maxHeight2 ? 1 : - 1, 0 );\n\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\n\t\t\t\t\t\t// standard output: rotate on X axis\n\t\t\t\t\t\tnormOut.set( norm.x, norm.z, - norm.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// three.js uses Y up, the code makes Z up, so time for a trick:\n\t\t\t\t\t// rotate on X axis, and offset down on Y axis so object ranges from -1 to 1 in Y\n\t\t\t\t\tthis.vertices[vertCount++].set( trueSize * vert[ 0 ], trueSize * ( vert[ 2 ] - maxHeight2 ), - trueSize * vert[ 1 ] );\n\n\t\t\t\t\tnormals[ normCount ++ ].set( normOut.x, normOut.y, normOut.z );\n\n\t\t\t\t\tuvs[ uvCount ++ ].set( 1 - t, 1 - s );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// save the faces\n\t\t\tfor ( sstep = 0 ; sstep < segments ; sstep ++ ) {\n\n\t\t\t\tfor ( tstep = 0 ; tstep < segments ; tstep ++ ) {\n\n\t\t\t\t\tv1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n\t\t\t\t\tv2 = v1 + 1;\n\t\t\t\t\tv3 = v2 + vertPerRow;\n\t\t\t\t\tv4 = v1 + vertPerRow;\n\n\t\t\t\t\t// Normals and UVs cannot be shared. Without clone(), you can see the consequences\n\t\t\t\t\t// of sharing if you call geometry.applyMatrix( matrix ).\n\t\t\t\t\tif ( notDegenerate ( this.vertices[v1], this.vertices[v2], this.vertices[v3] ) ) {\n\n\t\t\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ normals[v1], normals[v2], normals[v3] ] ) );\n\t\t\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[v1], uvs[v2], uvs[v3] ] );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( notDegenerate ( this.vertices[v1], this.vertices[v3], this.vertices[v4] ) ) {\n\n\t\t\t\t\t\tthis.faces.push( new THREE.Face3( v1, v3, v4, [ normals[v1], normals[v3], normals[v4] ] ) );\n\t\t\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[v1], uvs[v3], uvs[v4] ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// increment only if a surface was used\n\t\t\tsurfCount ++;\n\n\t\t}\n\n\t}\n\n\tthis.computeCentroids();\n\tthis.computeFaceNormals();\n\tthis.mergeVertices();\n\n};\n\n\nTHREE.TeapotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TeapotGeometry.prototype.constructor = THREE.TeapotGeometry;\n\nTHREE.TeapotGeometry.prototype.clone = function () {\n\n\tvar geometry = new THREE.TeapotGeometry(\n\t\tthis.parameters.size,\n\t\tthis.parameters.segments,\n\t\tthis.parameters.bottom,\n\t\tthis.parameters.lid,\n\t\tthis.parameters.body,\n\t\tthis.parameters.fitLid,\n\t\tthis.parameters.blinn\n\t);\n\n\treturn geometry;\n\n};\n"],"names":["THREE","TeapotGeometry","size","segments","bottom","lid","body","fitLid","blinn","i","r","c","tcoord","sstep","tstep","vertPerRow","s","t","sval","tval","p","dsval","dtval","v1","v2","v3","v4","teapotPatches","teapotVertices","Geometry","call","type","parameters","undefined","Math","max","floor","maxHeight2","maxHeight","trueSize","numVertices","normals","uvs","vertices","push","Vector3","Vector2","ms","Matrix4","set","g","sp","tp","dsp","dtp","mgm","vert","sdir","tdir","norm","normOut","gmx","tmtx","vsp","Vector4","vtp","vdsp","vdtp","vsdir","vtdir","mst","clone","transpose","notDegenerate","vtx1","vtx2","vtx3","equals","minPatches","maxPatches","surfCount","vertCount","normCount","uvCount","surf","multiplyMatrices","applyMatrix4","dot","crossVectors","normalize","x","z","y","faces","Face3","faceVertexUvs","computeCentroids","computeFaceNormals","mergeVertices","prototype","Object","create","constructor"],"version":3,"file":"index.db801c86.js.map"}